#![cfg(test)]
use crate::parser::ether_ip::IPPacketInfo;
use crate::parser::PacketParser;
use crate::parser::tcp::TCPPacketInfo;
use crate::parser::udp::UDPPacketInfo;

#[test]
fn test() {
    let packet_bytes: [u8; 66] = [
        0x30, 0x9c, 0x23, 0xe1, 0x47, 0x5d, 0xc4, 0xeb,
        0xff, 0xe9, 0x08, 0xf7, 0x08, 0x00, 0x45, 0x28,
        0x00, 0x34, 0x00, 0x00, 0x40, 0x00, 0x31, 0x06,
        0xfd, 0x51, 0x33, 0x9f, 0x57, 0x00, 0xc0, 0xa8,
        0x01, 0x03, 0x01, 0xbb, 0x55, 0xf0, 0xdb, 0x3c,
        0x6e, 0x10, 0xbc, 0xe3, 0x39, 0x7a, 0x80, 0x12,
        0xfa, 0xf0, 0x90, 0x77, 0x00, 0x00, 0x02, 0x04,
        0x05, 0xac, 0x01, 0x01, 0x04, 0x02, 0x01, 0x03,
        0x03, 0x07
    ];



    let ip = IPPacketInfo::from_bytes(&packet_bytes).unwrap();
    println!("IP: {ip}");
    let tcp = TCPPacketInfo::from_bytes(&ip.payload).unwrap();
    println!("TCP: {tcp:?}");
}
