use super::{error::DatatypeError, Datatype};
use color_eyre::eyre::bail;
use color_eyre::Result;
use std::collections::VecDeque;
use std::fmt::{Display, Formatter};
use std::ops::Deref;

#[derive(Debug, Copy, Clone)]
pub struct VarInt {
    pub value: i32,
}

impl VarInt {
    const SEGMENT_BITS: i32 = 0x7F;
    const CONTINUE_BIT: i32 = 0x80;
}

impl Datatype for VarInt {
    fn from_bytes(bytes: &mut VecDeque<u8>) -> color_eyre::Result<Self> {
        let mut value = 0;
        let mut position = 0;

        loop {
            let byte = bytes.pop_front().ok_or(DatatypeError::NotEnoughData)? as i32;
            value |= (byte & Self::SEGMENT_BITS) << position;

            if (byte & Self::CONTINUE_BIT) == 0 {
                break;
            }

            position += 7;

            if position >= 32 {
                bail!(DatatypeError::TooBig("VarInt"));
            }
        }

        Ok(Self { value })
    }
}

impl Display for VarInt {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.value)
    }
}

impl Deref for VarInt {
    type Target = i32;

    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

#[derive(Debug, Copy, Clone)]
pub struct VarLong {
    pub value: i64,
}

impl VarLong {
    const SEGMENT_BITS: i64 = 0x7F;
    const CONTINUE_BIT: i64 = 0x80;
}

impl Datatype for VarLong {
    fn from_bytes(bytes: &mut VecDeque<u8>) -> color_eyre::Result<Self> {
        let mut value = 0;
        let mut position = 0;

        loop {
            let byte = bytes.pop_front().ok_or(DatatypeError::NotEnoughData)? as i64;
            value |= (byte & Self::SEGMENT_BITS) << position;

            if (byte & Self::CONTINUE_BIT) == 0 {
                break;
            }

            position += 7;

            if position >= 64 {
                bail!(DatatypeError::TooBig("VarLong"));
            }
        }

        Ok(Self { value })
    }
}

impl Deref for VarLong {
    type Target = i64;

    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test() {
        let mut bytes = VecDeque::from([
            198, 77, 162, 219, 173, 140, 199, 62, 186, 139, 30, 177, 50, 29, 123, 233, 43, 244, 0,
            221, 67, 147, 153, 17, 215, 108, 194, 110, 122, 152, 94, 102, 215, 216, 77, 54, 11, 98,
            248, 69, 128, 156, 118, 132, 159, 202, 4, 92, 228, 251, 233, 50, 136, 140, 215, 243,
            55, 100, 52, 211, 34, 193, 176, 86, 23, 114, 228, 108, 168, 53, 159, 161, 7, 68, 125,
            197, 142, 95, 204, 150, 203, 208, 60, 6, 22, 138, 111, 176, 117, 100, 189, 122, 239,
            176, 189, 227, 67, 157, 242, 51, 0, 130, 89, 5, 248, 25, 42, 169, 198, 30, 111, 214,
            46, 164, 150, 157, 130, 104, 105, 48, 30, 8, 72, 118, 157, 142, 2, 55, 247, 212, 52,
            181, 180, 195, 189, 106, 7, 37, 242, 137, 91, 216, 152, 129, 168, 228, 167, 0, 207,
            214, 146, 58, 126, 84, 120, 73, 145, 175, 23, 8, 90, 84, 23, 17, 69, 139, 181, 252, 40,
            42, 30, 229, 208, 196, 186, 89, 241, 212, 187, 36, 162, 91, 83, 250, 111, 230, 102, 23,
            159, 146, 186, 113, 144, 228, 111, 99, 160, 201, 169, 197, 152, 88, 104, 147, 220, 37,
            3, 123, 142, 245, 177, 125, 171, 128, 24, 201, 159, 136, 153, 14, 95, 114, 104, 8, 238,
            212, 227, 113, 209, 229, 150, 94, 195, 88, 195, 250, 201, 211, 9, 73, 143, 149, 227,
            134, 41, 34, 191, 35, 229, 44, 237, 188, 175, 183, 182, 104, 240, 190, 242, 129, 242,
            161, 242, 145, 114, 94, 145, 30, 154, 108, 206, 104, 117, 175, 156, 66, 198, 12, 105,
            123, 249, 109, 225, 242, 96, 36, 217, 70, 82, 183, 74, 212, 252, 94, 180, 119, 156,
            186, 91, 29, 136, 183, 0, 87, 223, 199, 142, 201, 102, 144, 108, 150, 171, 147, 205,
            23, 236, 180, 157, 180, 85, 17, 16, 245, 52, 179, 157, 168, 45, 211, 72, 67, 55, 125,
            130, 61, 89, 203, 241, 85, 25, 209, 40, 236, 217, 170, 242, 55, 79, 115, 181, 182, 148,
            173, 108, 153, 204, 254, 68, 3, 144, 25, 213, 245, 128, 236, 216, 27, 200, 43, 13, 134,
            204, 100, 109, 75, 114, 179, 41, 160, 179, 84, 68, 0, 144, 180, 185, 74, 29, 152, 136,
            47, 213, 82, 146, 228, 0, 109, 218, 150, 216, 233, 60, 71, 220, 103, 183, 29, 250, 106,
            43, 101, 92, 176, 204, 189, 192, 51, 143, 3, 171, 60, 72, 164, 149, 166, 145, 219, 188,
            7, 197, 118, 73, 114, 181, 113, 70, 68, 212, 224, 181, 144, 165, 208, 158, 154, 126,
            35, 233, 16, 32, 32, 236, 165, 155, 89, 82, 104, 39, 97, 128, 232, 229, 51, 69, 128,
            149, 102, 184, 120, 186, 186, 148, 55, 112, 226, 190, 217, 226, 199, 228, 41, 37, 231,
            225, 135, 165, 64, 88, 22, 129, 199, 11, 218, 146, 86, 80, 75, 150, 143, 106, 243, 200,
            114, 51, 103, 92, 228, 31, 98, 118, 159, 171, 125, 33, 42, 145, 179, 85, 34, 255, 227,
            171, 20, 193, 162, 107, 230, 79, 174, 163, 235, 186, 197, 94, 173, 205, 102, 213, 13,
            112, 237, 128, 213, 53, 183, 98, 117, 148, 254, 255, 154, 49, 146, 35, 19, 121, 124,
            170, 126, 198, 142, 145, 75, 100, 171, 42, 41, 94, 146, 165, 215, 137, 206, 179, 221,
            120, 144, 60, 191, 24, 11, 107, 129, 96, 40, 100, 56, 64, 195, 171, 58, 13, 166, 189,
            87, 58, 82, 205, 175, 249, 131, 154, 141, 213, 130, 34, 150, 186, 157, 135, 237, 202,
            68, 23, 175, 56, 148, 122, 141, 100, 141, 139, 4, 66, 162, 150, 200, 251, 243, 1, 124,
            32, 31, 196, 7, 243, 33, 188, 154, 15, 229, 195, 248, 112, 62, 130, 143, 228, 163, 248,
            104, 62, 134, 143, 229, 114, 2, 193, 110, 164, 177, 178, 70, 81, 45, 38, 122, 57, 47,
            17, 193, 211, 37, 144, 144, 90, 123, 83, 99, 26, 102, 195, 65, 40, 19, 172, 215, 150,
            248, 10, 235, 162, 90, 29, 57, 98, 145, 201, 144, 91, 155, 195, 0, 136, 97, 187, 228,
            168, 79, 197, 211, 240, 116, 60, 3, 207, 196, 179, 240, 108, 60, 7, 207, 197, 243, 240,
            124, 188, 0, 47, 196, 139, 240, 98, 188, 4, 191, 196, 165, 208, 66, 68, 168, 196, 206,
            22, 200, 127, 21, 51, 137, 16, 165, 203, 254, 208, 2, 93, 27, 7, 133, 126, 74, 200, 17,
            233, 19, 10, 38, 194, 88, 248, 123, 201, 57, 91, 186, 47, 46, 39, 192, 83, 36, 170,
            103, 55, 21, 166, 167, 160, 176, 72, 65, 149, 184, 157, 156, 76, 56, 235, 149, 202,
            203, 18, 195, 97, 98, 230, 182, 66, 84, 116, 69, 171, 138, 47, 158, 136, 27, 98, 34,
            236, 201, 31, 19, 58, 72, 248, 39, 200, 139, 252, 42, 45, 172, 131, 15, 17, 253, 192,
            105, 30, 178, 9, 8, 235, 94, 148, 74, 138, 97, 173, 184, 56, 94, 165, 197, 173, 94,
            228, 146, 251, 89, 103, 166, 208, 175, 202, 208, 11, 196, 34, 175, 145, 189, 202, 123,
            108, 23, 243, 7, 106, 87, 191, 149, 191, 204, 39, 168, 227, 128, 138, 237, 86, 183,
            241, 29, 124, 59, 223, 201, 199, 171, 127, 148, 14, 57, 16, 140, 197, 189, 117, 56,
            155, 116, 224, 18, 200, 63, 104, 46, 52, 183, 174, 93, 1, 121, 236, 9, 198, 53, 142,
            143, 231, 19, 248, 68, 62, 137, 79, 230, 83, 248, 84, 62, 141, 79, 231, 51, 248, 76,
            62, 139, 207, 230, 115, 248, 92, 62, 143, 75, 124, 214, 14, 52, 106, 178, 211, 217,
            153, 113, 83, 174, 24, 91, 213, 15, 49, 114, 38, 178, 162, 114, 223, 88, 242, 79, 62,
            48, 252, 112, 55, 155, 109, 163, 92, 185, 251, 200, 176, 126, 242, 165, 134, 25, 138,
            172, 128, 177, 180, 109, 187, 162, 146, 54, 197, 249, 74, 65, 251, 178, 14, 29, 57,
            136, 138, 52, 111, 210, 168, 105, 99, 148, 211, 160, 196, 229, 217, 21, 98, 120, 217,
            23, 214, 76, 176, 217, 0, 194, 110, 75, 176, 73, 27, 202, 46, 112, 249, 221, 15, 90,
            12, 198, 134, 104, 203, 187, 60, 0, 101, 181, 114, 249, 181, 50, 100, 148, 235, 200,
            49, 53, 38, 255, 92, 110, 196, 2, 2, 74, 192, 94, 68, 253, 43, 128, 152, 219, 58, 43,
            19, 160, 232, 49, 212, 208, 237, 247, 176, 241, 60, 16, 21, 212, 204, 109, 33, 102,
            207, 68, 40, 132, 242, 228, 222, 117, 176, 33, 159, 213, 90, 36, 247, 194, 215, 38, 96,
            159, 64, 152, 136, 118, 242, 122, 20, 130, 23, 155, 16, 54, 110, 210, 180, 89, 110,
            158, 136, 225, 139, 138, 129, 92, 149, 194, 89, 216, 101, 246, 135, 31, 121, 244, 177,
            199, 187, 3, 139, 233, 241, 84, 115, 25, 55, 42, 35, 130, 163, 212, 62, 211, 103, 130,
            185, 136, 193, 21, 214, 162, 164, 67, 199, 214, 173, 36, 161, 246, 22, 49, 88, 196,
            202, 80, 133, 130, 176, 87, 209, 18, 243, 99, 222, 223, 190, 157, 164, 77, 0, 111, 90,
            31, 233, 153, 168, 88, 102, 39, 85, 177, 160, 222, 51, 153, 119, 77, 254, 46, 223, 28,
            21, 29, 29, 130, 250, 37, 59, 244, 145, 132, 168, 53, 246, 216, 181, 57, 170, 135, 149,
            194, 174, 109, 178, 75, 58, 212, 239, 210, 44, 95, 109, 223, 185, 244, 225, 198, 69, 5,
            188, 93, 14, 205, 109, 209, 182, 19, 97, 176, 122, 160, 210, 121, 160, 198, 197, 101,
            29, 37, 163, 150, 74, 30, 185, 210, 28, 72, 178, 221, 75, 204, 108, 8, 130, 21, 183,
            38, 25, 226, 62, 179, 202, 58, 77, 49, 243, 83, 44, 177, 1, 97, 142, 241, 96, 20, 192,
            29, 92, 91, 71, 92, 86, 168, 116, 200, 41, 106, 131, 26, 228, 51, 154, 87, 210, 220,
            155, 221, 168, 85, 75, 146, 213, 194, 83, 191, 113, 113, 83, 181, 117, 179, 130, 122,
            109, 219, 241, 210, 38, 237, 27, 230, 202, 158, 211, 72, 88, 253, 39, 98, 30, 16, 156,
            91, 208, 175, 115, 92, 214, 174, 109, 78, 110, 7, 169, 140, 155, 26, 152, 76, 253, 36,
            137, 209, 246, 186, 34, 126, 22, 38, 27, 21, 251, 105, 219, 50, 203, 67, 90, 20, 212,
            43, 229, 176, 150, 70, 222, 198, 37, 106, 113, 251, 250, 249, 173, 178, 27, 54, 109,
            214, 164, 65, 161, 210,
        ]);
        println!("{}", bytes.len());

        let temp = VarInt::from_bytes(&mut bytes).unwrap();
        println!("{temp:?}");

        println!("{bytes:?}");

    }
}
